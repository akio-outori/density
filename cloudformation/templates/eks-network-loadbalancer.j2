---

AWSTemplateFormatVersion: '2010-09-09'
Description: Create a Network Load Balancer for EKS

Parameters:

  DnsName:
    Description: DNS Name to assign to the load balancer
    Type: String

Resources:

  HttpIngress:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: {{ sceptre_user_data.cluster_name }}-http-ingress
      Port: "80"
      Protocol: "TCP"
      HealthCheckPort: "10253"
      HealthCheckProtocol: "TCP"
      VpcId: {{ sceptre_user_data.vpc }}

  HttpsIngress:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: {{ sceptre_user_data.cluster_name }}-https-ingress
      Port: "443"
      Protocol: "TCP"
      HealthCheckPort: "10253"
      HealthCheckProtocol: "TCP"
      VpcId: {{ sceptre_user_data.vpc }}

  ElasticIp01:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"

  ElasticIp02:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "network"
      IpAddressType: "ipv4"
      Scheme: "internet-facing"
      SubnetMappings:
        - SubnetId: {{ sceptre_user_data.subnets[0] }}
          AllocationId: !GetAtt ElasticIp01.AllocationId
        - SubnetId: {{ sceptre_user_data.subnets[1] }}
          AllocationId: !GetAtt ElasticIp02.AllocationId

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: "80"
      Protocol: "TCP"
      DefaultActions:
        - TargetGroupArn: !Ref HttpIngress
          Type: "forward"

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: "443"
      Protocol: "TCP"
      DefaultActions:
        - TargetGroupArn: !Ref HttpsIngress
          Type: "forward"

  Route53Alias:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DnsName
      Type: "A"
      HostedZoneId: {{ sceptre_user_data.hosted_zone }}
      AliasTarget:
        DNSName: !GetAtt NetworkLoadBalancer.DNSName
        HostedZoneId: !GetAtt NetworkLoadBalancer.CanonicalHostedZoneID


Outputs:

  HttpIngress:
    Description: HTTP Ingress for the Network Load Balancer
    Value: !Ref HttpIngress

  HttpsIngress:
    Description: HTTPS Ingress for the Network Load Balancer
    Value: !Ref HttpsIngress

  NetworkLoadBalancer:
    Description: Network Load Balancer
    Value: !Ref NetworkLoadBalancer
